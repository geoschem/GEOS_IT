#!/usr/bin/perl -w

#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !MODULE: checkGeosFp
#
# !DESCRIPTION: Checks to see if all of the GEOS-FP "raw" met data for a
#  given date has been downloaded.  Returns the number of "missing" files.
#\\
#\\
# !USES:
#
  require 5.003;                        # Need this version of Perl or newer
  use strict;                           # Force explicit variable declarations
  use Dates qw( &julDay &ymdExtract );  # Imported methods from Dates.pm
#
# !PUBLIC MEMBER FUNCTIONS:
#  &getDefaults($$)
#  &verifyFile($$$)
#  &checkFiles($)
#  &main()     
#
# !CALLING SEQUENCE:
#  checkGeosFp YYYYMMDD
#
# !REVISION HISTORY: 
#  24 Oct 2011 - R. Yantosca - Initial version, based on GEOS_5/perl/checkGeos5
#  20 Sep 2013 - R. Yantosca - Renamed to checkGeosFp, modified for GEOS-FP
#EOP
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: getDefaults
#
# !DESCRIPTION: Routine getDefaults reads an input file and returns the
#  name of the directory where GEOS-FP "raw" met data files are found.
#\\
#\\
# !INTERFACE:
#
sub getDefaults($$) {
#
# !INPUT PARAMETERS:
# 
  # $fileName : Filename containing default settings to be read
  # $date     : YYYYMMDD date for which to process GEOS-5 met data
  my ( $fileName, $date ) = @_;
#
# !RETURN VALUE:
#
  my $metDir = "";   # Directory in which raw GEOS-5 met fields are found
#
# !CALLING SEQUENCE:
#  ( $metDir, $vStr ) = &getDefaults( FILENAME );
#
# !REVISION HISTORY:
#  24 Oct 2011 - R. Yantosca - Initial version, based on GEOS_5/perl/checkGeos5
#  20 Sep 2013 - R. Yantosca - No longer need to return $vStr
#EOP
#------------------------------------------------------------------------------
#BOC
#
# !LOCAL VARIABLES:
#
  my @file   = "";
  my @result = "";

  #--------------------------------------
  # Read variable settings from the file
  #--------------------------------------

  # Read info from input file
  open( I, "<$fileName" ) or die "Cannot open $fileName!\n";
  chomp( @file = <I> );
  close( I );

  # Parse thru each line until we find the "raw" data directory
  for ( my $i = 0; $i < scalar( @file ); $i++ ) {
    if ( $file[$i] =~ "==> Raw Met Data Directory" ) {
      $metDir = $file[++$i];
    }
  }


  # Return 
  return( $metDir );
}
#EOC
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: verifyFile
#
# !DESCRIPTION: Routine verifyFile checks to see if a single GEOS-5 raw met 
#  data file is present, and if it is approximately the correct size.  
#  The routine will return 1 if the file is present and 0 otherwise.
#\\
#\\
# !INTERFACE:
#
sub verifyFile($$$) {
#
# !INPUT PARAMETERS:
# 
  # $mask : File mask with tokens to be replaced
  # $date : Date in YYYYMMDD format
  # $time : Time in hhmm format
  my ( $mask, $date, $time ) = @_;
#
# !RETURN VALUE
#
  # # of files found to match the input criteria
  my $found = 0;
#
# !CALLING SEQUENCE:
#  $stat += &verifyFile( $mask, $date, $time );
#
# !REMARKS:
#  Used by routine &checkFiles
#
# !REVISION HISTORY:
#  24 Oct 2011 - R. Yantosca - Initial version, based on GEOS_5/perl/checkGeos5
#EOP
#------------------------------------------------------------------------------
#BOC
#
# !LOCAL VARIABLES:
#
  my $file  = $mask;
  my $year  = substr( $date, 0, 4 );
  my $month = substr( $date, 4, 2 );

  # Replace date and time tokens 
  $file =~ s/YYYYMMDD/$date/g;
  $file =~ s/YYYY/$year/g;
  $file =~ s/MM/$month/g;
  $file =~ s/hhmm/$time/g;
  
  # If the *.xml file exists then that means that the corresponding *.hdf
  # file has been fully downloaded.  Set status flag and return.
  if ( -f $file ) { $found = 1; }

  # Return 
  return( $found );
}
#EOC
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: checkFiles
#
# !DESCRIPTION: Routine checkFiles returns the number of missing GEOS-5 raw 
#  data files corresponding to the day YYYYMMDD.  When there are no more 
#  missing files, then checkFiles returns 0.
#\\
#\\
# !INTERFACE:
#
sub checkFiles($$) {
#
# !INPUT PARAMETERS:
# 
  # $date  : YYYY/MM/DD date
  # $quiet : If = 1, will suppress printout of full message
  my ( $date, $quiet ) = @_;   
#
# !RETURN VALUE:
#
  # Number of missing data files (initialize to zero)
  my $missing = 0;     
#
# !CALLING SEQUENCE:
#  &checkFiles( 20110101 );
#
# !REMARKS:
#  There should be 160 total files/day.  We are downloading 4 hourly 
#  collections (24 files/day) and 8 3-hourly collections (8 files/day).
#
# !REVISION HISTORY:
#  24 Oct 2011 - R. Yantosca - Initial version, based on GEOS_5/perl/checkGeos5
#  25 Oct 2011 - R. Yantosca - Now test for 160 files/day (skip D57T1NXOCN)
#  13 Jan 2012 - R. Yantosca - Test for 144 files (skip D57T3NVODT, D57T3NVQDT)
#  20 Sep 2013 - R. Yantosca - Updated for GEOS-FP, we no longer need to check
#                              for the tavg3_3d_rad_Nv files.  Now 136 total.
#  05 Dec 2013 - R. Yantosca - Now restore the tavg3_3d_rad_Nv files
#EOP
#------------------------------------------------------------------------------
#BOC
#
# !LOCAL VARIABLES:

  # Get the met field directory and GEOS version string
  my $d     = &getDefaults( "doGeosFp.input", $date );

  # Loop index
  my $GMT   = "";

  # Number of found files
  my $found = 0;

  # File names from each of the relevant collections
  my $flx_x = "$d/GEOS.fp.asm.tavg1_2d_flx_Nx.YYYYMMDD_hhmm.V01.nc4";
  my $lnd_x = "$d/GEOS.fp.asm.tavg1_2d_lnd_Nx.YYYYMMDD_hhmm.V01.nc4";
  my $rad_x = "$d/GEOS.fp.asm.tavg1_2d_rad_Nx.YYYYMMDD_hhmm.V01.nc4";
  my $slv_x = "$d/GEOS.fp.asm.tavg1_2d_slv_Nx.YYYYMMDD_hhmm.V01.nc4";
  my $ins_v = "$d/GEOS.fp.asm.inst3_3d_asm_Nv.YYYYMMDD_hhmm.V01.nc4";
  my $asm_v = "$d/GEOS.fp.asm.tavg3_3d_asm_Nv.YYYYMMDD_hhmm.V01.nc4";
  my $cld_v = "$d/GEOS.fp.asm.tavg3_3d_cld_Nv.YYYYMMDD_hhmm.V01.nc4";
  my $mst_v = "$d/GEOS.fp.asm.tavg3_3d_mst_Nv.YYYYMMDD_hhmm.V01.nc4"; 
  my $mst_e = "$d/GEOS.fp.asm.tavg3_3d_mst_Ne.YYYYMMDD_hhmm.V01.nc4";
  my $rad_v = "$d/GEOS.fp.asm.tavg3_3d_rad_Nv.YYYYMMDD_hhmm.V01.nc4";
 
  # Times of day at which files are produced
  my @GMT3i = qw( 0000 0300 0600 0900 1200 1500 1800 2100 );
  my @GMT3  = qw( 0130 0430 0730 1030 1330 1630 1930 2230 );
  my @GMT1  = qw( 0030 0130 0230 0330 0430 0530 0630 0730 
                  0830 0930 1030 1130 1230 1330 1430 1530 
                  1630 1730 1830 1930 2030 2130 2230 2330 );

  # Count collections w/ hourly files (there should be 24 files/day)
  foreach $GMT ( @GMT1  ) { $found += &verifyFile( $flx_x, $date, $GMT ); }
  foreach $GMT ( @GMT1  ) { $found += &verifyFile( $lnd_x, $date, $GMT ); }
  foreach $GMT ( @GMT1  ) { $found += &verifyFile( $rad_x, $date, $GMT ); }
  foreach $GMT ( @GMT1  ) { $found += &verifyFile( $slv_x, $date, $GMT ); }

  # Count collections w/ 3-hourly files (there should be 8 files/day)
  foreach $GMT ( @GMT3i ) { $found += &verifyFile( $ins_v, $date, $GMT ); }
  foreach $GMT ( @GMT3  ) { $found += &verifyFile( $asm_v, $date, $GMT ); }
  foreach $GMT ( @GMT3  ) { $found += &verifyFile( $cld_v, $date, $GMT ); }
  foreach $GMT ( @GMT3  ) { $found += &verifyFile( $mst_v, $date, $GMT ); }
  foreach $GMT ( @GMT3  ) { $found += &verifyFile( $mst_e, $date, $GMT ); }
  foreach $GMT ( @GMT3  ) { $found += &verifyFile( $rad_v, $date, $GMT ); }

  # Compute the # of missing files and print it to stdout.
  $missing = 144 - $found;

  # If QUIET is set, just print the missing # of files
  # Otherwise, print a descriptive error message
  if ( $quiet ) {
    print "$missing";
  } else {
    print "Number of missing GEOS-FP raw met files for $date: $missing\n";
  }			       

  # Return
  return( $missing );
}
#EOC
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: main
#
# !DESCRIPTION: Main is the driver program for the checkGeos5 script.  
#\\
#\\ 
# !INTERFACE:
#
sub main() {
#
# !CALLING SEQUENCE:
#  checkGeos5 YYYYMMDD     # Prints a descriptive message
#  checkGeos5 YYYYMMDD 1   # Short format, just returns the # of missing files
#
# !REVISION HISTORY:
#  24 Oct 2011 - R. Yantosca - Initial version, based on GEOS_5/perl/checkGeos5
#  20 Sep 2013 - R. Yantosca - Renamed to checkGeosFp
#EOP
#------------------------------------------------------------------------------
#BOC

  # Error message
  my $missing = 0;
  my $errMsg  = "Usage: checkGeosFp YYYYMMDD SHORTFORMAT\n!";

  # Call the checkFiles method or return w/ an error message
  if    ( scalar( @ARGV ) == 2 ) { $missing = &checkFiles( @ARGV    ); }
  elsif ( scalar( @ARGV ) == 1 ) { $missing = &checkFiles( @ARGV, 0 ); }
  else                           { print "$errMsg\n"; exit(1);         }

  # Return /w status
  return( $missing );
}

#------------------------------------------------------------------------------

# Call main program to get # of missing data files
my $missing = main();

# Return # of missing data files to Unix shell
exit( $missing );
#EOC

