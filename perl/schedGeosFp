#!/usr/bin/perl -w

#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !MODULE: schedGeosFp
#
# !DESCRIPTION: schedGeosFp is a Perl script which schedules a GEOS-FP data
#  download to happen automatically via the "at" command.  It calls the
#  getGeosFp script to schedule the data download, and the doGeos57Multi
#  script to start the data processing after all of the data has arrived.
#\\
#\\
# !USES:
#
  require 5.003;               # Need this version of Perl or newer
  use strict;                  # Force strict variable declarations
  use Dates qw( &addDate );    # Routines from "Dates.pm"
#
# !CALLING SEQUENCE:
#  schedGeosFp YYYYMMDD nDays [now]
#
# !REMARKS:
#  Uses the Unix "at" command to schedule jobs.  
#
# !REVISION HISTORY: 
#  07 Aug 2013 - R. Yantosca - Initial version, based on schedGeos57
#EOP
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: main
#
# !DESCRIPTION: Driver routine for the sleepGeosFp script.  Gets arguments
#  from the command line and schedules the data procesing job.
#\\
#\\
# !INTERFACE:
#
sub main() {
#
# !REVISION HISTORY: 
#  07 Aug 2013 - R. Yantosca - Initial version, based on schedGeos57
#  08 Aug 2013 - R. Yantosca - Now calls purgeGeosFp to remove raw met data
#                              files for prior days from the download directory
#  20 Sep 2013 - R. Yantosca - Now call doGeosFpMulti
#EOP
#------------------------------------------------------------------------------
#BOC
  
  #==========================================================================
  # Initialization
  #==========================================================================

  # Error check # of arguments
  if ( scalar( @ARGV ) != 3 ) {  
    print "Usage: schedGeosFp YYYYMMDD nDays when\n"; 
    exit(1); 
  }

  # Initialize
  my $start = $ARGV[0];
  my $nDays = $ARGV[1];
  my $when  = $ARGV[2];
  my $date  = "";
  my $cmd   = "at $when <<EOF\n";

  #==========================================================================
  # Schedule jobs
  #==========================================================================

  # Loop over the # of days
  for ( my $i=0; $i<abs($nDays); $i++ ) {

    # Get the calendar date for the Ith date after start date
    # NOTE: if nDays is negative, then we'll go back in time!
    if ( $nDays < 0 ) { $date = &addDate( $start, -$i ); }
    else              { $date = &addDate( $start,  $i ); }

    # Add commands to the string
#-----------------------------------------------------------------------------
# Prior to 2/11/14:
# For now, disable the call to "purgeGeosFp" script. (bmy, 2/11/14)
#    $cmd .= "./purgeGeosFp $date\n";
#-----------------------------------------------------------------------------
    $cmd .= "./getGeosFp $date\n";
    $cmd .= "./doGeosFpMulti $date\n";
  }

  # Add the end of file
  $cmd .= "EOF";

  # For debug -- print the command
  print "$cmd\n";

  # Execute the command
  #qx( $cmd );

  # Exit normally
  return( $? );
}
#EOC

#------------------------------------------------------------------------------

# Call main program
main();

# Exit and pass error code back to Unix shell
exit( $? );
